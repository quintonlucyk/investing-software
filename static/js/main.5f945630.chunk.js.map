{"version":3,"sources":["Components/DisplayStockData.js","Pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["DisplayStockData","this","props","data","react_default","a","createElement","undefined","error","Fragment","React","Component","Main","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","search","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","symbol","res","wrap","_context","prev","next","preventDefault","symbolRef","current","value","toUpperCase","fetch","concat","sent","t0","json","t1","t2","result","setState","t3","stop","_x","apply","arguments","createRef","state","className","Form_default","inline","onSubmit","Group","Label","Control","type","ref","placeholder","Button_default","variant","Components_DisplayStockData","App","Pages_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAuBeA,mLAnBP,OAAuB,MAAnBC,KAAKC,MAAMC,KAEPC,EAAAC,EAAAC,cAAA,oDAE6BC,IAA1BN,KAAKC,MAAMC,KAAKK,MAEnBJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACIL,EAAAC,EAAAC,cAAA,+EACAF,EAAAC,EAAAC,cAAA,SAAIL,KAAKC,MAAMC,KAAKK,QAKxBJ,EAAAC,EAAAC,cAAA,wCAfeI,IAAMC,WC6CtBC,cAzCX,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KAOViB,OARmB,eAAAC,EAAAN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAjB,EAAAkB,KAQV,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAL,EAAAjB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACLN,EAAMO,iBACAN,EAASb,EAAKoB,UAAUC,QAAQC,MAAMC,cAFvCP,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIiBM,MAAK,4DAAAC,OAA6DZ,IAJnF,cAIKC,EAJLE,EAAAU,KAAAV,EAAAW,GAAA3B,EAAAgB,EAAAE,KAAA,EAK4BJ,EAAIc,OALhC,OAAAZ,EAAAa,GAAAb,EAAAU,KAAAV,EAAAc,GAAA,CAKcC,OALdf,EAAAa,IAAAb,EAAAW,GAKIK,SALJ3B,KAAAW,EAAAW,GAAAX,EAAAc,IAAAd,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAiB,GAAAjB,EAAA,SAODhB,EAAKgC,SAAS,CAACD,OAAQ,CAACpC,MAAKqB,EAAAiB,MAP5B,yBAAAjB,EAAAkB,SAAAvB,EAAA,kBARU,gBAAAwB,GAAA,OAAA5B,EAAA6B,MAAAhD,KAAAiD,YAAA,GAEfrC,EAAKoB,UAAYvB,IAAMyC,YACvBtC,EAAKuC,MAAQ,CACTR,OAAQ,MAJG/B,wEAoBf,OACIT,EAAAC,EAAAC,cAAA,OAAK+C,UAAU,iBACXjD,EAAAC,EAAAC,cAAA,OAAK+C,UAAU,kCACPjD,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAMkD,QAAM,EAACC,SAAUvD,KAAKkB,QACxBf,EAAAC,EAAAC,cAACgD,EAAAjD,EAAKoD,MAAN,KACIrD,EAAAC,EAAAC,cAACgD,EAAAjD,EAAKqD,MAAN,CAAYL,UAAU,OAAtB,iBACAjD,EAAAC,EAAAC,cAACgD,EAAAjD,EAAKsD,QAAN,CAAcN,UAAU,MAAMO,KAAK,OAAOC,IAAK5D,KAAKgC,UAAW6B,YAAY,kBAE/E1D,EAAAC,EAAAC,cAACyD,EAAA1D,EAAD,CAAQ2D,QAAQ,UAAUX,UAAU,MAAMO,KAAK,UAA/C,YAKZxD,EAAAC,EAAAC,cAAA,OAAK+C,UAAU,kCACXjD,EAAAC,EAAAC,cAAC2D,EAAD,CAAkB9D,KAAMF,KAAKmD,MAAMR,kBAnCpClC,IAAMC,iBCKVuD,MANf,WACE,OACE9D,EAAAC,EAAAC,cAAC6D,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f945630.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass DisplayStockData extends React.Component {\r\n    render(){\r\n        if (this.props.data == null) {\r\n            return (\r\n                <p>Excited to pull some data for you!</p>\r\n            );\r\n        } else if (this.props.data.error !== undefined) {\r\n            return (\r\n                <React.Fragment>\r\n                    <p>Shoots, looks like something went wrong. Here is the error you got</p>\r\n                    <p>{this.props.data.error}</p>\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <p>Success on the call!</p>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default DisplayStockData;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DisplayStockData from '../Components/DisplayStockData';\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.symbolRef = React.createRef();\r\n        this.state = {\r\n            result: null\r\n        }\r\n    }\r\n\r\n    search = async (event) => {\r\n        event.preventDefault();\r\n        const symbol = this.symbolRef.current.value.toUpperCase();\r\n        try {\r\n            const res = await fetch(`https://financialmodelingprep.com/api/v3/company/profile/${symbol}`);\r\n            this.setState({result: await res.json()});\r\n        } catch (error) {\r\n            this.setState({result: {error: error}})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App container\" >\r\n                <div className=\"row justify-content-center m-4\">\r\n                        <Form inline onSubmit={this.search}>\r\n                            <Form.Group>\r\n                                <Form.Label className=\"m-2\">Stock Symbol </Form.Label>\r\n                                <Form.Control className=\"m-2\" type=\"text\" ref={this.symbolRef} placeholder=\"Enter symbol\" />\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" className=\"m-2\" type=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                </div>\r\n                <div className=\"row justify-content-center m-4\">\r\n                    <DisplayStockData data={this.state.result} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport Main from './Pages/Main';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <Main />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}