{"version":3,"sources":["Components/Data.js","Pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","items","_this2","fetch","concat","symbol","then","res","json","result","setState","_this$state","react_default","a","createElement","message","ListGroup_default","variant","Item","React","Component","Main","handleSubmit","event","preventDefault","searchedSymbol","symbolRef","current","value","createRef","className","onSubmit","type","ref","placeholder","Components_Data","App","Pages_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b45617c.chunk.js","sourcesContent":["import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nclass Data extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n        };\n    }\n\n    componentDidUpdate() {\n        fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${this.props.symbol}&interval=5min&apikey=DG61VKY2XF1OVBWJ`)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, items } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else if (items[\"Meta Data\"]) {\n            return (\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>{`1. Information: ${items[\"Meta Data\"][[\"1. Information\"]]}`}</ListGroup.Item>\n                    <ListGroup.Item>{`2. Symbol: ${items[\"Meta Data\"][[\"2. Symbol\"]]}`}</ListGroup.Item>\n                    <ListGroup.Item>{`3. Last Refreshed: ${items[\"Meta Data\"][[\"3. Last Refreshed\"]]}`}</ListGroup.Item>\n                    <ListGroup.Item>{`4. Interval: ${items[\"Meta Data\"][[\"4. Interval\"]]}`}</ListGroup.Item>\n                    <ListGroup.Item>{`5. Output Size: ${items[\"Meta Data\"][[\"5. Output Size\"]]}`}</ListGroup.Item>\n                </ListGroup>\n            );\n        } else if (items[\"Error Message\"]) {\n            return (\n                <ListGroup>\n                    <ListGroup.Item variant=\"danger\">No Luck for That Symbol</ListGroup.Item>\n                </ListGroup>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default Data;","import React from 'react';\nimport Data from '../Components/Data';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchedSymbol: \"\"\n        }\n        this.symbolRef = React.createRef();\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.setState({ searchedSymbol: this.symbolRef.current.value });\n    };\n\n    render() {\n        return (\n            <div className=\"App container\" >\n                <div className=\"row justify-content-center m-4\">\n                    <div className=\"col-6\">\n                        <form onSubmit={this.handleSubmit}>\n                            <input type=\"text\" ref={this.symbolRef} placeholder=\"Enter symbol here\" />\n                            <input type=\"submit\" value=\"Submit\" />\n                        </form>\n                    </div>\n                </div>\n                {this.state.searchedSymbol && (\n                    <Data symbol={this.state.searchedSymbol} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport Main from './Pages/Main';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Main />\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}